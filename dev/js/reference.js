"use strict";
// "use strict" (строгий режим) - директива, для указания стандарта ECMAScript5(ES5). По умолчанию код js работает по старым стандартам.
// не поддерживается IE9-

/*
* Основные понятия и термины
* */

//-- Переменные --
var message;
message = "Hello";
message = "World";
var value = 10;
value = message;
// переменная состоит из имени и выделенной области памяти, которая ему соответствует.
// обьявляется переменная с помощью ключевого слова var.
// присвоить значение можно сразу или дальше в коде. Можно перезаписывать значение переменной сколько угодно, при этом предыдущее значение удаляется.
// имена переменных могут состоять из букв, цифр, символов $ и _. При этом первый символ не должен быть цифрой. Для записи используется camelCase.
// имена переменных чувствительны к регистру. Есть зарезервированные языком js ключевые слова, которые нельзя использовать(return, class, export, var).

//-- Константы --
var COLOR_RED = "#f00";
// технически константы - это те же переменные, их добавление подразумевает смысловую нагрузку.
// как правило их пишут большими буквами используя символ _.
// константы используют для удобства вместо строк и цифр, чтобы сделать программу понятнее и избежать лишних ошибок.
// напр. в значении константы var COLOR_ORANGE = "#FF7F00"; при многократном использовании можно сделать ошибку, а используя только имя константы возможность допустить ошибку уменьшается. Да и по смыслу понятнее, что это оранжевый цвет.

//-- Операторы --
// Унарный оператор - применяется к одному операнду (-х, +х, ++х, х++).
  // var х = -х; - унарный минус, меняет знак числа на противоположный.
  // var x = "22", x = +x; - унарный плюс не влияет на числа, но преобразует строчные значения в число (если это возможно).
  // х++, х = х + 1; - инкремент, увеличивает переменную на еденицу (постфиксная запись, в месте вызова записывает значение в заданную переменную, но возвращает значение до увеличения).
  // х--, х = х - 1; - декремент, уменьшает переменную на еденицу (постфиксная запись, в месте вызова записывает значение в заданную переменную, но возвращает значение до уменьшения).
  // ++х, х = х + 1; - инкремент, увеличивает переменную на еденицу (префиксная запись, в месте вызова записывает значение в заданную переменную и возвращает увеличенное значение).
  // --х, х = х - 1; - декремент, уменьшает переменную на еденицу (постфиксная запись, в месте вызова записывает значение в заданную переменную и возвращает уменьшенное значение).
// Бинарный оператор - применяется к двум операндам (х + у, х - у, х * у).
  // var c = 1 + 1; - бинарный плюс, применимо к числам - складывает числа.
  // var c = "1" + "1"; - бинарный плюс, применимо к строкам - объединяет их в одну (производит конкатенацию).
  // var c = "1" + 1; - бинарный плюс, применимо к строкам и числам одновременно - преобразует число в строку, а затем складывает их (вне зависимости от расположения,). Результатом этого примера будет с = "11". Остальные операторы напротив преобразуют строку в число (если это возможно).
  // var c = 5 % 2; - оператор взятия остатка, возвращает остаток от деления 5 на 2, результатом будет 1.
  // var c = c + 2 и c += 2 - сокращенная запись арифметических действий с присваиванием (применяется для операторов +,-,*,/,% и также <<,>>,>>>,&,|,^)
  // оператор "запятая" - позволяет перечислять выражения, каждое из них вычисляется и отбрасывается, а последнее возвращает (прим. for (a = 2, b = 3, c = a+b, a < 10, a++) {}).
// Операторы сравнения
  // а > b, a < b - операторы больше/меньше.
  // a >= b, a <= b - операторы больше/меньше или равно.
  // а == b - символ равенства (один символ = означает присвоение). При сравнении разных типов данных, применяется числовое преобразование ("2" > 1 - true, "01" == 1 - true, false == 0, true == 1).
  // != - не равно.
  // a === b - строгое равенство, равенство без числового преобразования данных, т.е. сравнивая строку и число, получим false.
  // a !== b - строгое неравенство.
  // операторы сравнения возвращают true или false.
  // сравнение строчных значений происходит побуквенно. У каждого символа в строке свой номер по Юникоду, именно они сравниваются между собой. При этом строчные буквы имеют код больше, чем происные.
  /*при сравнении
   * "а" > "b" - false, строчные значения преобразуются в соответствующий символ юникода и затем сравниваются
   * "1" > "1" - false, тоже самое
   * "а" > "1" - false, тоже самое
   * "2" > 1 - true, т.к. обе величины приравниваются к соответствующему числовому значеню, 1 остается 1, а "2" преобразуется в 2.
   * "a" > 1 - false, т.к. обе величины приравниваются к соответствующему числовому значеню, 1 остается 1, а "а" не имеет числового аналога, и преобразуется в NaN.*/
  // null равен undefined и не равен чему-либо еще - это правило. Однако при числовом преобразовании null преобразуется в 0, а undefined в NaN.
  /*При этом
    null > 0 - false, т.к. при преобразовании дает ноль
    null == 0 - false, т.к. он равен только undefined и ничему более
    null >= 0 - true, т.к. операторы сравнения преобразуют значение в число, посему ноль может быть равен нулю (оператор равенства не преобразует значение null в ноль)
    undefined > 0, undefined < 0, undefined == 0 - false, т.к. при сравнении возвращает значение NaN (которое не сравнивается даже с собой), а при проверке равенства может быть равен только null.*/
// Приоритет оператора - чем выше значение приоритета оператора, тем раньше он выполнится в коде. Если значения равны, то выполняется слева направо (исключения смотреть в таблице).


/*
* Типы данных
* */

//-- Число(number) --
var dataTypeNumber = 528;
// тип данных для указания числового значение и возможности работы с вычислениями.
// синтаксис: запись числа без кавычек, число в кавычках уже является строкой.
// Infinity (бесконечность) - спец. числовое значение, обозначающее бесконечность (напр. деление на ноль).
// NaN (ошибка вычислений) - спец. числовое значение, обозначающее некорректный результат математических операций (например при умножении числа на строку: alert( "строка" * 2 );)

//-- Строка(string) --
var dataTypeString = "Строчное значение";

//-- Булевый тип(boolean) --
var dataTypeBoolean = true;
// тип логических данных и может быть только "true" или "false".

//-- null --
var dataTypeNull = null;
// специальное значение, обозначающее, что значение переменной задано, но неизвестно (напр. var age = null; возраст age есть, но неизвестен).

//-- undefined --
var dataTypeUndefined = undefined;
// специальное значение, обозначающее, что значение переменной не присвоено (или не найдено) (напр. var x; alert( x ); результатом будет undefined).

//-- Объект(object) --
var dataTypeObject = { dataObject1: "value" };


/*
* Команды (по алфавиту)
*/

// alert
alert( "I'm JavaScript" );
alert( "Or ECMAScript" );
// alert( "text" ) - оповещает пользователя о применении действий на странице. Т.е. выводится модальное окно с возможность только нажать "ok".

// prompt
prompt( "Title", "Test title");
// prompt( title, default ) - выводит модальное окно с заголовком title и полем для ввода с текстом, заполненным по умолчанию default.
// prompt возвращает то, что было введено пользователем - строку со значением или null, если нажата кнопка cancel или окно было закрыто.
// всегда стоит указывать значение default, т.к. IE сам подставит значение undefined (можно указать пустую строку "").
// браузер Safari 5.1+ при отмене ввода возвращает пустую строку, вместо null.

// confirm
confirm( "Can I do this?" );
// confirm ( question ) - выводит модальное окно с двумя кнопками ok и cancel и возвращает соответственно true или false (если закрыть окно, то тоже будет false).

// typeof
console.log( typeof dataTypeNumber ); // "number"
console.log( typeof dataTypeString ); // "string"
console.log( typeof dataTypeBoolean ); // "boolean"
console.log( typeof dataTypeNull ); // "object"
console.log( typeof dataTypeUndefined ); // "undefined"
console.log( typeof dataTypeObject ); // "object"
// typeof name / typeof( name ) - оператор, возвращающий тип аргумента (тип данных находящихся в name).